function dcopy(t){return JSON.parse(JSON.stringify(t))}class Station{constructor(t,s=0,n=0){this.id=t,this.x_coord=s,this.y_coord=n,this.taxi=[],this.bus=[],this.underground=[],this.blackticket=[]}adjacent(){return this.taxi.concat(this.bus,this.underground,this.blackticket)}}class Graph{constructor(){this.stations=[],this.weights={taxi:1,bus:1,underground:1,blackticket:1},this.load()}str_list_to_int(t){for(var s=[],n=0;n<t.length;n++)s.push(parseInt(t[n]));return s}load(){for(var s in station_neighbors){let t=new Station(parseInt(s),sc[s].x,sc[s].y);t.taxi=this.str_list_to_int(station_neighbors[s].taxi),t.bus=this.str_list_to_int(station_neighbors[s].bus),t.underground=this.str_list_to_int(station_neighbors[s].underground),t.blackticket=this.str_list_to_int(station_neighbors[s].blackticket),this.stations.push(t)}}get_station(t){return this.stations[t-1]}minimum_token_path(t,s){let n=new Array(this.stations.length+1).fill(!1);var i=[];i.push(t);let o=new Array(this.stations.length+1).fill(-1);for(n[t]=!0;0<i.length;){for(var a=i.shift(),e=!1,r=0;r<this.get_station(a).adjacent().length;r++){var l=this.get_station(a).adjacent()[r];if(!n[l]&&(n[l]=!0,o[l]=a,i.push(l),l===s)){e=!0;break}}if(e)break}for(var h=[s];o[h[h.length-1]]!==t;)h.push(o[h[h.length-1]]);for(var c=[],r=h.length-1;0<=r;r--){var u=this.get_station(o[h[r]]);u.taxi.includes(h[r])?c.push([h[r],"taxi"]):u.bus.includes(h[r])?c.push([h[r],"bus"]):u.underground.includes(h[r])?c.push([h[r],"underground"]):u.blackticket.includes(h[r])?c.push([h[r],"blackticket"]):console.log("Minimum token path failed")}return c}allroutes(t,s,n=[],i=!0){if(s<=0)return[dcopy(n)];var o,a=[],e=this.get_station(t);for(o of new Set(e.adjacent()))e.taxi.includes(o)&&(a=a.concat(this.allroutes(o,s-1,dcopy(n).concat([[o,"taxi"]]),i))),e.bus.includes(o)&&(a=a.concat(this.allroutes(o,s-1,dcopy(n).concat([[o,"bus"]]),i))),e.underground.includes(o)&&(a=a.concat(this.allroutes(o,s-1,dcopy(n).concat([[o,"underground"]]),i))),i||(a=a.concat(this.allroutes(o,s-1,dcopy(n).concat([[o,"blackticket"]]),i)));return a}}function path_to_move_dict(t){var s={role:syg_role,is_double:!1,next_position:0,transport:"",next_to_next_position:null,next_transport:null};return 2<t.length||t.length<=0?null:(1===t.length?(s.next_position=t[0][0],s.transport=t[0][1]):(s.is_double=!0,s.next_position=t[0][0],s.transport=t[0][1],s.next_to_next_position=t[1][0],s.next_transport=t[1][1]),s)}function create_balls(t){for(var s=0;s<t;s++){var n=$("<div>",{class:"ball"});$("body").append(n),n.offset({top:Math.random()*$(window).height(),left:Math.random()*$(window).width()})}}function move_balls(){$(".ball").each(function(t){var s=$(this),n=s.offset().left,i=n+s.width(),o=s.offset().top,a=o+s.height();n<0&&(vx_balls[t]=Math.abs(vx_balls[t])),i>$(window).width()-10&&(vx_balls[t]=-Math.abs(vx_balls[t])),o<0&&(vy_balls[t]=Math.abs(vy_balls[t])),a>$(window).height()&&(vy_balls[t]=-Math.abs(vy_balls[t])),s.offset({top:o+vy_balls[t],left:n+vx_balls[t]})}),setTimeout(move_balls,100)}